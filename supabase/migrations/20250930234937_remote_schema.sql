

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."class_type" AS ENUM (
    'lec',
    'tut',
    'lab'
);


ALTER TYPE "public"."class_type" OWNER TO "postgres";


CREATE TYPE "public"."squad_type" AS ENUM (
    'pending',
    'active',
    'deleted'
);


ALTER TYPE "public"."squad_type" OWNER TO "postgres";


CREATE TYPE "public"."squad_visibility" AS ENUM (
    'open',
    'closed'
);


ALTER TYPE "public"."squad_visibility" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."squad" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "course" "text" NOT NULL,
    "profile_url" "text",
    "creator" "uuid" NOT NULL,
    "status" "public"."squad_type" DEFAULT 'pending'::"public"."squad_type" NOT NULL,
    "visibility" "public"."squad_visibility" DEFAULT 'closed'::"public"."squad_visibility" NOT NULL
);


ALTER TABLE "public"."squad" OWNER TO "postgres";


ALTER TABLE "public"."squad" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Squad_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."attendance" (
    "meeting_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "is_attending" boolean DEFAULT true NOT NULL,
    "comment" "text"
);


ALTER TABLE "public"."attendance" OWNER TO "postgres";


ALTER TABLE "public"."attendance" ALTER COLUMN "meeting_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."attendance_meeting_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."enrolment" (
    "id" bigint NOT NULL,
    "user" "uuid" NOT NULL,
    "course" "text" NOT NULL,
    "class" "public"."class_type" NOT NULL,
    "section" "text",
    "start_time" timestamp with time zone NOT NULL,
    "end_time" timestamp with time zone,
    "room" "text" NOT NULL
);


ALTER TABLE "public"."enrolment" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."meeting" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "squad_id" bigint NOT NULL,
    "description" "text",
    "start_time" timestamp with time zone NOT NULL,
    "end_time" timestamp with time zone,
    "creator" "uuid" NOT NULL,
    "room" "text"
);


ALTER TABLE "public"."meeting" OWNER TO "postgres";


ALTER TABLE "public"."meeting" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."meeting_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."member" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "squad_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL
);


ALTER TABLE "public"."member" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."message" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "squad_id" bigint NOT NULL,
    "sender" "uuid" NOT NULL,
    "body" "text",
    "is_edited" boolean DEFAULT false NOT NULL,
    "is_deleted" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."message" OWNER TO "postgres";


ALTER TABLE "public"."message" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."message_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "zid" "text" NOT NULL,
    "profile_url" "text" NOT NULL,
    "ics_link" "text" NOT NULL,
    "degree" "text" NOT NULL,
    "gender" "text",
    "age" smallint,
    "bio" "text"
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."room" (
    "name" "text" NOT NULL,
    "abbr" "text" NOT NULL
);


ALTER TABLE "public"."room" OWNER TO "postgres";


ALTER TABLE ONLY "public"."squad"
    ADD CONSTRAINT "Squad_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."attendance"
    ADD CONSTRAINT "attendance_pkey" PRIMARY KEY ("meeting_id", "user_id");



ALTER TABLE ONLY "public"."enrolment"
    ADD CONSTRAINT "enrolment_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."meeting"
    ADD CONSTRAINT "meeting_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_pkey" PRIMARY KEY ("squad_id", "user_id");



ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "message_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_zid_key" UNIQUE ("zid");



ALTER TABLE ONLY "public"."room"
    ADD CONSTRAINT "room_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."room"
    ADD CONSTRAINT "room_pkey" PRIMARY KEY ("name");



ALTER TABLE ONLY "public"."squad"
    ADD CONSTRAINT "Squad_creator_fkey" FOREIGN KEY ("creator") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."attendance"
    ADD CONSTRAINT "attendance_meeting_id_fkey" FOREIGN KEY ("meeting_id") REFERENCES "public"."meeting"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."attendance"
    ADD CONSTRAINT "attendance_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."enrolment"
    ADD CONSTRAINT "enrolment_room_fkey" FOREIGN KEY ("room") REFERENCES "public"."room"("name");



ALTER TABLE ONLY "public"."enrolment"
    ADD CONSTRAINT "enrolment_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."meeting"
    ADD CONSTRAINT "meeting_creator_fkey" FOREIGN KEY ("creator") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."meeting"
    ADD CONSTRAINT "meeting_room_fkey" FOREIGN KEY ("room") REFERENCES "public"."room"("name");



ALTER TABLE ONLY "public"."meeting"
    ADD CONSTRAINT "meeting_squad_id_fkey" FOREIGN KEY ("squad_id") REFERENCES "public"."squad"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_squad_id_fkey" FOREIGN KEY ("squad_id") REFERENCES "public"."squad"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."member"
    ADD CONSTRAINT "member_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "message_sender_fkey" FOREIGN KEY ("sender") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."message"
    ADD CONSTRAINT "message_squad_id_fkey" FOREIGN KEY ("squad_id") REFERENCES "public"."squad"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."message";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";








































































































































































GRANT ALL ON TABLE "public"."squad" TO "anon";
GRANT ALL ON TABLE "public"."squad" TO "authenticated";
GRANT ALL ON TABLE "public"."squad" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Squad_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Squad_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Squad_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."attendance" TO "anon";
GRANT ALL ON TABLE "public"."attendance" TO "authenticated";
GRANT ALL ON TABLE "public"."attendance" TO "service_role";



GRANT ALL ON SEQUENCE "public"."attendance_meeting_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."attendance_meeting_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."attendance_meeting_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."enrolment" TO "anon";
GRANT ALL ON TABLE "public"."enrolment" TO "authenticated";
GRANT ALL ON TABLE "public"."enrolment" TO "service_role";



GRANT ALL ON TABLE "public"."meeting" TO "anon";
GRANT ALL ON TABLE "public"."meeting" TO "authenticated";
GRANT ALL ON TABLE "public"."meeting" TO "service_role";



GRANT ALL ON SEQUENCE "public"."meeting_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."meeting_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."meeting_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."member" TO "anon";
GRANT ALL ON TABLE "public"."member" TO "authenticated";
GRANT ALL ON TABLE "public"."member" TO "service_role";



GRANT ALL ON TABLE "public"."message" TO "anon";
GRANT ALL ON TABLE "public"."message" TO "authenticated";
GRANT ALL ON TABLE "public"."message" TO "service_role";



GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."room" TO "anon";
GRANT ALL ON TABLE "public"."room" TO "authenticated";
GRANT ALL ON TABLE "public"."room" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
